{
    "componentChunkName": "component---node-modules-gatsby-theme-code-notes-src-templates-note-js",
    "path": "/indexeddb",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IndexedDB\",\n  \"emoji\": \"📝\",\n  \"tags\": [\"note\", \"web\", \"database\"],\n  \"link\": \"https://developers.google.com/web/ilt/pwa/working-with-indexeddb\",\n  \"created\": \"2021-11-15T17:12:28.000Z\",\n  \"modified\": \"2021-11-15T17:12:28.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"IndexedDB is a large-scale, NoSQL storage system. It lets you store just about anything in the user's browser. In addition to the usual search, get, and put actions, IndexedDB also supports transactions.\"), mdx(\"p\", null, \"Each IndexedDB database is unique to an origin (typically, this is the site domain or subdomain), meaning it cannot access or be accessed by any other origin.\"), mdx(\"h2\", {\n    \"id\": \"tools\"\n  }, \"Tools\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dfahlander/Dexie.js\"\n  }, \"Dexie.js\"), \": A wrapper library for indexedDB. Dexie provides a neat database API with a well thought-through API design, robust error handling, extendability, change tracking awareness and extended KeyRange support (case insensitive search, set matches and OR operations).\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import url from \\\"url\\\";\\nimport _ from \\\"lodash\\\";\\nimport Dexie from \\\"dexie\\\";\\nimport keymirror from \\\"keymirror\\\";\\n\\nexport const PROPERTIES_KEY = \\\"properties\\\";\\nexport const PROPERTY_IDENTITY = `${PROPERTIES_KEY}.${NAME_PROPERTY_KEY}`;\\nexport const PROPERTY_TIME = `${PROPERTIES_KEY}.${TIME_PROPERTY_KEY}`;\\nexport const INDEXEDDB_NAMESPACE =\\n  process.env.REACT_APP_INDEXED_DB_NAMESPACE || \\\"ups\\\";\\n\\nexport const TABLE_NAMES = keymirror({\\n  geojsonRows: null,\\n  lastKnownLocations: null,\\n  specification: null,\\n  metadata: null,\\n});\\n\\nexport const getDexieSchema = () => ({\\n  // store all incoming data of all features\\n  [TABLE_NAMES.geojsonRows]: `[${PROPERTY_IDENTITY}+${PROPERTY_TIME}], ${PROPERTY_IDENTITY}, ${PROPERTY_TIME}`,\\n  // store most the recent data of each feature\\n  [TABLE_NAMES.lastKnownLocations]: `${PROPERTY_IDENTITY}, ${PROPERTY_TIME}`,\\n  // store the specification sent to the UP\\n  [TABLE_NAMES.specification]: \\\"++id\\\",\\n  // store the dataset metadata object\\n  [TABLE_NAMES.metadata]: \\\"++id\\\",\\n});\\n\\n/**\\n * Get the database object by name\\n * @param {String} dbIdentifier database name\\n *\\n * @return {Object} Dexie instance\\n */\\nexport const getDbByName = (dbIdentifier) => {\\n  const db = new Dexie(dbIdentifier);\\n  const schema = getDexieSchema();\\n  // declare tables\\n  db.version(1).stores(schema);\\n  return db;\\n};\\n\\n/* eslint-disable import/no-webpack-loader-syntax */\\nconst getTable = (db, tableName) => {\\n  return db ? db[tableName] : undefined;\\n};\\n\\nexport const clearGeoJsonRows = async (db) => {\\n  const table = getTable(db, TABLE_NAMES.geojsonRows);\\n  if (table) {\\n    await table.clear();\\n  }\\n};\\n\\nexport const clearFeatureLastData = async (db) => {\\n  const table = getTable(db, TABLE_NAMES.lastKnownLocations);\\n  if (table) {\\n    await table.clear();\\n  }\\n};\\n\\n/**\\n * Get database name\\n * @param {String} datasetEndpoint dataset service URL\\n * @param {String} datasetServiceIdentifier dataset service identifier\\n *\\n * @return {String} database identifier\\n */\\nexport const getDbIdentifier = (datasetEndpoint, datasetServiceIdentifier) => {\\n  const { hostname } = url.parse(datasetEndpoint);\\n  return `${INDEXEDDB_NAMESPACE}_${hostname}_${datasetServiceIdentifier}`;\\n};\\n\\n/**\\n * Declare database and associated tables\\n * @prop {String} dbIdentifier database name\\n * @prop {Object} metadata dataset metadata\\n * @prop {Object} specification dataset specification(part of dataset metadata)\\n * @prop {Boolean} [resetGeoJsonRows=false] whether to clear all feature data\\n *\\n * @return {Object} Dexie instance\\n */\\nexport const createDb = async ({\\n  dbIdentifier,\\n  specification,\\n  metadata,\\n  resetGeoJsonRows = false,\\n}) => {\\n  // declare database\\n  const db = getDbByName(dbIdentifier);\\n  await db.specification.add(JSON.parse(JSON.stringify(specification)));\\n  await db.metadata.add(JSON.parse(JSON.stringify(metadata)));\\n\\n  if (resetGeoJsonRows) {\\n    await clearGeoJsonRows(db);\\n  }\\n  // clear lastKnownLocations table before inserting new data\\n  await clearFeatureLastData(db);\\n\\n  return db;\\n};\\n\\n/**\\n * Get data from the lastKnownLocations table\\n * @param {Object} db dexie instance\\n *\\n * @return {Array} geojson data\\n */\\nexport const getFeatureLastData = (db) => {\\n  const table = getTable(db, TABLE_NAMES.lastKnownLocations);\\n  return table ? table.toArray() : [];\\n};\\n\\n/**\\n * Delete all data from the given database\\n * @param {String} dbIdentifier database name\\n */\\nexport const deleteDatabaseByName = async (dbIdentifier) => {\\n  const db = getDbByName(dbIdentifier);\\n  await db.delete();\\n};\\n\\n/**\\n * Get data from the geojsonRows table within the specific datetime range\\n * @param {String} dbIdentifier database Identifier\\n * @param {Object} datetimeRange start and end datetime\\n *\\n * @return {Collection|undefined} a collection of database objects\\n */\\nexport const getFeatureDataByTimeRange = (dbIdentifier, datetimeRange = {}) => {\\n  const db = getDbByName(dbIdentifier);\\n  const { start, end } = datetimeRange;\\n  const table = getTable(db, TABLE_NAMES.geojsonRows);\\n  if (!table) return undefined;\\n\\n  return !start || !end\\n    ? table.toCollection()\\n    : table.where(PROPERTY_TIME).between(start, end);\\n};\\n\\n/**\\n * Get data from the geojsonRows table\\n * @param {Object} dbIdentifier database instance\\n * @param {String} identity property identity\\n * @param {Object} datetimeRange start and end datetime\\n *\\n`* @return {Array} geojson data\\n */\\nexport const getFeatureData = async (\\n  dbIdentifier,\\n  identity,\\n  datetimeRange = {}\\n) => {\\n  const db = getDbByName(dbIdentifier);\\n  db.open();\\n  const table = getTable(db, TABLE_NAMES.geojsonRows);\\n  if (!table) return [];\\n\\n  let geojsonRows;\\n  if (_.isEmpty(datetimeRange)) {\\n    // get all data for a given primary key\\n    geojsonRows = await table\\n      .where(PROPERTY_IDENTITY)\\n      .equals(identity)\\n      .sortBy(PROPERTY_TIME);\\n  } else {\\n    // get data for a given primary key between two date times\\n    const { start, end } = datetimeRange;\\n    geojsonRows = await table\\n      .where([`${PROPERTY_IDENTITY}`, `${PROPERTY_TIME}`])\\n      .equals([identity, start], [identity, end])\\n      .sortBy(PROPERTY_TIME);\\n  }\\n\\n  return geojsonRows;\\n};\\n\\n/**\\n * Delete all data from the given database\\n * @param {String} dbIdentifier database Identifier\\n * @param {Array} keys array of primary keys of the objects to delete\\n */\\nexport const deleteFeatureLastDataByKeys = async (dbIdentifier, keys) => {\\n  const db = getDbByName(dbIdentifier);\\n  const table = getTable(db, TABLE_NAMES.geojsonRows);\\n  if (table) {\\n    await table.bulkDelete(keys);\\n  }\\n};\\n\\n/**\\n * Delete all databases at current host.\\n *\\n * @return {Array} deleted database names\\n */\\nexport const deleteAllDatabaseAtCurrentHost = async () => {\\n  const names = await Dexie.getDatabaseNames();\\n  const result = await Promise.all(\\n    names.map(async (name) => {\\n      await deleteDatabaseByName(name);\\n      return name;\\n    })\\n  );\\n  return result;\\n};\\n\\n/**\\n * Get time range of the data in the given database\\n * @param {String} dbIdentifier database name\\n *\\n * @return {Object} {startTime, endTime}\\n */\\nexport const getDataTimeRange = async (dbIdentifier) => {\\n  const db = getDbByName(dbIdentifier);\\n  const firstRow = await db.geojsonRows.orderBy(PROPERTY_TIME).first(1);\\n  const lastRow = await db.geojsonRows.orderBy(PROPERTY_TIME).last();\\n  if (!firstRow || !lastRow) return {};\\n\\n  const start = getUtcDateTimeString(firstRow.properties.time);\\n  const end = getUtcDateTimeString(lastRow.properties.time);\\n  return { start, end };\\n};\\n\\n/**\\n * Add the data or replace existing data in the specified table\\n * @param {Object} db dexie instance\\n * @param {Object} table table name\\n * @param {Array} data the objects to store\\n */\\nexport const bulkPutDbData = (db, table, data) => {\\n  return db[table].bulkPut(data);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// libraries\\nimport * as Comlink from \\\"comlink\\\";\\nimport _ from \\\"lodash\\\";\\nimport DexieBatch from \\\"dexie-batch\\\";\\nimport { getFeatureDataByTimeRange } from \\\"helpers/db\\\";\\n\\nconst DEFAULT_BATCH_SIZE = 50000;\\n\\nexport const fetchCachedDbData = (dbIdentifier, onBatch, onError) => {\\n  const collection = getFeatureDataByTimeRange(dbIdentifier);\\n  if (!collection) return;\\n\\n  const batchDriverPromise = collection.count().then((n) => {\\n    const batchSize =\\n      n < DEFAULT_BATCH_SIZE * 10 ? DEFAULT_BATCH_SIZE : DEFAULT_BATCH_SIZE * 2;\\n    return new DexieBatch({ batchSize, limit: n });\\n  });\\n\\n  let hasCachedData = false;\\n  batchDriverPromise.then((batchDriver) =>\\n    batchDriver\\n      .eachBatch(collection, (geojsonRows) => {\\n        hasCachedData = hasCachedData || !_.isEmpty(geojsonRows);\\n        const loading = true;\\n        onBatch(loading, geojsonRows, hasCachedData);\\n      })\\n      .then(() => {\\n        const loading = false;\\n        const geojsonRows = [];\\n        onBatch(loading, geojsonRows, hasCachedData);\\n      })\\n      .catch(onError)\\n  );\\n};\\n\\nComlink.expose({ fetchCachedDbData });\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"IndexedDB","tags":["note","web","database"],"emoji":"📝","link":"https://developers.google.com/web/ilt/pwa/working-with-indexeddb","modified":"November 15, 2021","modifiedTimestamp":"2021-11-15T17:12:28.000Z"},"references":[],"fields":{"slug":"/indexeddb"},"tableOfContents":{"items":[{"url":"#tools","title":"Tools"}]},"parent":{"relativePath":"indexeddb.md"}}},"pageContext":{"id":"85fc4d7e-3ea7-53c2-9748-c68becc2bba1","previous":{"id":"bd24c40f-2459-5518-9d8f-4ac851838329","frontmatter":{"title":"AWS IoT Core","tags":["aws","iot"]},"fields":{"slug":"/iot_core"}},"next":{"id":"bf6951d5-9499-5b23-b161-f8343437e540","frontmatter":{"title":"Influence How Decisions Get Made, Even if You’re Not the Most Senior Person in the Room","tags":["management","personal-growth"]},"fields":{"slug":"/influence_how_decisions_get_made_even_if_you_re_not_the_most_senior_person_in_the_room"}},"hasUntagged":true,"basePath":"/","tags":[{"tag":"Archived","totalCount":3,"slug":"/archived","path":"/tag/archived"},{"tag":"Ethereum","totalCount":3,"slug":"/ethereum","path":"/tag/ethereum"},{"tag":"NFT","totalCount":1,"slug":"/nft","path":"/tag/nft"},{"tag":"UI/UX","totalCount":1,"slug":"/uiux","path":"/tag/uiux"},{"tag":"academic","totalCount":2,"slug":"/academic","path":"/tag/academic"},{"tag":"ai","totalCount":4,"slug":"/ai","path":"/tag/ai"},{"tag":"algorithm","totalCount":13,"slug":"/algorithm","path":"/tag/algorithm"},{"tag":"analysis","totalCount":3,"slug":"/analysis","path":"/tag/analysis"},{"tag":"api","totalCount":5,"slug":"/api","path":"/tag/api"},{"tag":"apollo","totalCount":1,"slug":"/apollo","path":"/tag/apollo"},{"tag":"architecture","totalCount":2,"slug":"/architecture","path":"/tag/architecture"},{"tag":"asciidoc","totalCount":3,"slug":"/asciidoc","path":"/tag/asciidoc"},{"tag":"audio","totalCount":1,"slug":"/audio","path":"/tag/audio"},{"tag":"automation","totalCount":1,"slug":"/automation","path":"/tag/automation"},{"tag":"aws","totalCount":9,"slug":"/aws","path":"/tag/aws"},{"tag":"bash","totalCount":2,"slug":"/bash","path":"/tag/bash"},{"tag":"basketball","totalCount":2,"slug":"/basketball","path":"/tag/basketball"},{"tag":"best-practices","totalCount":3,"slug":"/best-practices","path":"/tag/best-practices"},{"tag":"big data","totalCount":3,"slug":"/big-data","path":"/tag/big-data"},{"tag":"blockchain","totalCount":15,"slug":"/blockchain","path":"/tag/blockchain"},{"tag":"book","totalCount":2,"slug":"/book","path":"/tag/book"},{"tag":"bst","totalCount":1,"slug":"/bst","path":"/tag/bst"},{"tag":"career","totalCount":2,"slug":"/career","path":"/tag/career"},{"tag":"cell","totalCount":1,"slug":"/cell","path":"/tag/cell"},{"tag":"chart","totalCount":1,"slug":"/chart","path":"/tag/chart"},{"tag":"cheatsheet","totalCount":2,"slug":"/cheatsheet","path":"/tag/cheatsheet"},{"tag":"chrome","totalCount":1,"slug":"/chrome","path":"/tag/chrome"},{"tag":"cli","totalCount":11,"slug":"/cli","path":"/tag/cli"},{"tag":"cloud","totalCount":1,"slug":"/cloud","path":"/tag/cloud"},{"tag":"code review","totalCount":1,"slug":"/code-review","path":"/tag/code-review"},{"tag":"code-review","totalCount":1,"slug":"/code-review","path":"/tag/code-review"},{"tag":"communication","totalCount":4,"slug":"/communication","path":"/tag/communication"},{"tag":"contact tracking","totalCount":1,"slug":"/contact-tracking","path":"/tag/contact-tracking"},{"tag":"container","totalCount":1,"slug":"/container","path":"/tag/container"},{"tag":"converter","totalCount":1,"slug":"/converter","path":"/tag/converter"},{"tag":"covid19","totalCount":1,"slug":"/covid19","path":"/tag/covid19"},{"tag":"crypto","totalCount":1,"slug":"/crypto","path":"/tag/crypto"},{"tag":"cryptography","totalCount":1,"slug":"/cryptography","path":"/tag/cryptography"},{"tag":"csv","totalCount":1,"slug":"/csv","path":"/tag/csv"},{"tag":"data","totalCount":1,"slug":"/data","path":"/tag/data"},{"tag":"data science","totalCount":1,"slug":"/data-science","path":"/tag/data-science"},{"tag":"database","totalCount":11,"slug":"/database","path":"/tag/database"},{"tag":"design","totalCount":3,"slug":"/design","path":"/tag/design"},{"tag":"dev","totalCount":1,"slug":"/dev","path":"/tag/dev"},{"tag":"develop","totalCount":1,"slug":"/develop","path":"/tag/develop"},{"tag":"development","totalCount":1,"slug":"/development","path":"/tag/development"},{"tag":"devops","totalCount":1,"slug":"/devops","path":"/tag/devops"},{"tag":"discipline","totalCount":1,"slug":"/discipline","path":"/tag/discipline"},{"tag":"distributed","totalCount":1,"slug":"/distributed","path":"/tag/distributed"},{"tag":"docker","totalCount":5,"slug":"/docker","path":"/tag/docker"},{"tag":"docx","totalCount":1,"slug":"/docx","path":"/tag/docx"},{"tag":"dog","totalCount":1,"slug":"/dog","path":"/tag/dog"},{"tag":"duckdb","totalCount":1,"slug":"/duckdb","path":"/tag/duckdb"},{"tag":"dynamodb","totalCount":2,"slug":"/dynamodb","path":"/tag/dynamodb"},{"tag":"edr","totalCount":1,"slug":"/edr","path":"/tag/edr"},{"tag":"education","totalCount":1,"slug":"/education","path":"/tag/education"},{"tag":"efficiency","totalCount":1,"slug":"/efficiency","path":"/tag/efficiency"},{"tag":"emergency","totalCount":1,"slug":"/emergency","path":"/tag/emergency"},{"tag":"engineering","totalCount":1,"slug":"/engineering","path":"/tag/engineering"},{"tag":"error-handling","totalCount":1,"slug":"/error-handling","path":"/tag/error-handling"},{"tag":"eslint","totalCount":1,"slug":"/eslint","path":"/tag/eslint"},{"tag":"ethereum","totalCount":2,"slug":"/ethereum","path":"/tag/ethereum"},{"tag":"experience","totalCount":1,"slug":"/experience","path":"/tag/experience"},{"tag":"functional","totalCount":1,"slug":"/functional","path":"/tag/functional"},{"tag":"game","totalCount":1,"slug":"/game","path":"/tag/game"},{"tag":"gis","totalCount":27,"slug":"/gis","path":"/tag/gis"},{"tag":"git","totalCount":5,"slug":"/git","path":"/tag/git"},{"tag":"github","totalCount":4,"slug":"/github","path":"/tag/github"},{"tag":"google","totalCount":3,"slug":"/google","path":"/tag/google"},{"tag":"graphql","totalCount":4,"slug":"/graphql","path":"/tag/graphql"},{"tag":"handbook","totalCount":1,"slug":"/handbook","path":"/tag/handbook"},{"tag":"hash","totalCount":1,"slug":"/hash","path":"/tag/hash"},{"tag":"hci","totalCount":1,"slug":"/hci","path":"/tag/hci"},{"tag":"health","totalCount":1,"slug":"/health","path":"/tag/health"},{"tag":"image","totalCount":1,"slug":"/image","path":"/tag/image"},{"tag":"immunotherapies","totalCount":1,"slug":"/immunotherapies","path":"/tag/immunotherapies"},{"tag":"infrastructure","totalCount":1,"slug":"/infrastructure","path":"/tag/infrastructure"},{"tag":"insights","totalCount":1,"slug":"/insights","path":"/tag/insights"},{"tag":"interface","totalCount":1,"slug":"/interface","path":"/tag/interface"},{"tag":"interoperability","totalCount":2,"slug":"/interoperability","path":"/tag/interoperability"},{"tag":"interview","totalCount":3,"slug":"/interview","path":"/tag/interview"},{"tag":"investment","totalCount":1,"slug":"/investment","path":"/tag/investment"},{"tag":"iot","totalCount":12,"slug":"/iot","path":"/tag/iot"},{"tag":"javascript","totalCount":19,"slug":"/javascript","path":"/tag/javascript"},{"tag":"js","totalCount":13,"slug":"/js","path":"/tag/js"},{"tag":"json","totalCount":1,"slug":"/json","path":"/tag/json"},{"tag":"jupyter","totalCount":2,"slug":"/jupyter","path":"/tag/jupyter"},{"tag":"kubernetes","totalCount":1,"slug":"/kubernetes","path":"/tag/kubernetes"},{"tag":"laws","totalCount":1,"slug":"/laws","path":"/tag/laws"},{"tag":"leadership","totalCount":1,"slug":"/leadership","path":"/tag/leadership"},{"tag":"leetcode","totalCount":8,"slug":"/leetcode","path":"/tag/leetcode"},{"tag":"life","totalCount":1,"slug":"/life","path":"/tag/life"},{"tag":"linear algebra","totalCount":1,"slug":"/linear-algebra","path":"/tag/linear-algebra"},{"tag":"linux","totalCount":1,"slug":"/linux","path":"/tag/linux"},{"tag":"log","totalCount":1,"slug":"/log","path":"/tag/log"},{"tag":"luxon","totalCount":1,"slug":"/luxon","path":"/tag/luxon"},{"tag":"machine learning","totalCount":2,"slug":"/machine-learning","path":"/tag/machine-learning"},{"tag":"macos","totalCount":5,"slug":"/macos","path":"/tag/macos"},{"tag":"management","totalCount":193,"slug":"/management","path":"/tag/management"},{"tag":"mapbox","totalCount":1,"slug":"/mapbox","path":"/tag/mapbox"},{"tag":"markdown","totalCount":1,"slug":"/markdown","path":"/tag/markdown"},{"tag":"math","totalCount":1,"slug":"/math","path":"/tag/math"},{"tag":"methodology","totalCount":1,"slug":"/methodology","path":"/tag/methodology"},{"tag":"microservices","totalCount":2,"slug":"/microservices","path":"/tag/microservices"},{"tag":"mobile","totalCount":1,"slug":"/mobile","path":"/tag/mobile"},{"tag":"models","totalCount":1,"slug":"/models","path":"/tag/models"},{"tag":"moment","totalCount":1,"slug":"/moment","path":"/tag/moment"},{"tag":"mqtt","totalCount":2,"slug":"/mqtt","path":"/tag/mqtt"},{"tag":"negotiation","totalCount":1,"slug":"/negotiation","path":"/tag/negotiation"},{"tag":"node","totalCount":5,"slug":"/node","path":"/tag/node"},{"tag":"nodejs","totalCount":3,"slug":"/nodejs","path":"/tag/nodejs"},{"tag":"note","totalCount":23,"slug":"/note","path":"/tag/note"},{"tag":"npm","totalCount":1,"slug":"/npm","path":"/tag/npm"},{"tag":"oauth","totalCount":1,"slug":"/oauth","path":"/tag/oauth"},{"tag":"object detection","totalCount":2,"slug":"/object-detection","path":"/tag/object-detection"},{"tag":"odata","totalCount":1,"slug":"/odata","path":"/tag/odata"},{"tag":"ogc","totalCount":9,"slug":"/ogc","path":"/tag/ogc"},{"tag":"openapi","totalCount":1,"slug":"/openapi","path":"/tag/openapi"},{"tag":"operators","totalCount":1,"slug":"/operators","path":"/tag/operators"},{"tag":"orchestrator","totalCount":1,"slug":"/orchestrator","path":"/tag/orchestrator"},{"tag":"pandoc","totalCount":2,"slug":"/pandoc","path":"/tag/pandoc"},{"tag":"parent","totalCount":1,"slug":"/parent","path":"/tag/parent"},{"tag":"patterns","totalCount":1,"slug":"/patterns","path":"/tag/patterns"},{"tag":"performance","totalCount":2,"slug":"/performance","path":"/tag/performance"},{"tag":"personal-growth","totalCount":82,"slug":"/personal-growth","path":"/tag/personal-growth"},{"tag":"pet","totalCount":1,"slug":"/pet","path":"/tag/pet"},{"tag":"philosophy","totalCount":1,"slug":"/philosophy","path":"/tag/philosophy"},{"tag":"pipeline","totalCount":1,"slug":"/pipeline","path":"/tag/pipeline"},{"tag":"pipenv","totalCount":1,"slug":"/pipenv","path":"/tag/pipenv"},{"tag":"pm2","totalCount":1,"slug":"/pm2","path":"/tag/pm2"},{"tag":"point free","totalCount":1,"slug":"/point-free","path":"/tag/point-free"},{"tag":"postgresql","totalCount":3,"slug":"/postgresql","path":"/tag/postgresql"},{"tag":"presentation","totalCount":2,"slug":"/presentation","path":"/tag/presentation"},{"tag":"principles","totalCount":1,"slug":"/principles","path":"/tag/principles"},{"tag":"privacy","totalCount":1,"slug":"/privacy","path":"/tag/privacy"},{"tag":"problem solving","totalCount":1,"slug":"/problem-solving","path":"/tag/problem-solving"},{"tag":"program","totalCount":2,"slug":"/program","path":"/tag/program"},{"tag":"programming","totalCount":5,"slug":"/programming","path":"/tag/programming"},{"tag":"provenance","totalCount":1,"slug":"/provenance","path":"/tag/provenance"},{"tag":"psychology","totalCount":3,"slug":"/psychology","path":"/tag/psychology"},{"tag":"python","totalCount":7,"slug":"/python","path":"/tag/python"},{"tag":"react","totalCount":7,"slug":"/react","path":"/tag/react"},{"tag":"reading","totalCount":1,"slug":"/reading","path":"/tag/reading"},{"tag":"reasoning","totalCount":1,"slug":"/reasoning","path":"/tag/reasoning"},{"tag":"regex","totalCount":1,"slug":"/regex","path":"/tag/regex"},{"tag":"relationship","totalCount":1,"slug":"/relationship","path":"/tag/relationship"},{"tag":"remote","totalCount":1,"slug":"/remote","path":"/tag/remote"},{"tag":"remote-work","totalCount":1,"slug":"/remote-work","path":"/tag/remote-work"},{"tag":"research","totalCount":7,"slug":"/research","path":"/tag/research"},{"tag":"resources","totalCount":1,"slug":"/resources","path":"/tag/resources"},{"tag":"ruby","totalCount":1,"slug":"/ruby","path":"/tag/ruby"},{"tag":"rxjs","totalCount":1,"slug":"/rxjs","path":"/tag/rxjs"},{"tag":"scalable","totalCount":1,"slug":"/scalable","path":"/tag/scalable"},{"tag":"scraping","totalCount":1,"slug":"/scraping","path":"/tag/scraping"},{"tag":"security","totalCount":3,"slug":"/security","path":"/tag/security"},{"tag":"sensorThings API","totalCount":1,"slug":"/sensor-things-api","path":"/tag/sensor-things-api"},{"tag":"serverless","totalCount":1,"slug":"/serverless","path":"/tag/serverless"},{"tag":"sh","totalCount":1,"slug":"/sh","path":"/tag/sh"},{"tag":"shell","totalCount":6,"slug":"/shell","path":"/tag/shell"},{"tag":"spatial","totalCount":2,"slug":"/spatial","path":"/tag/spatial"},{"tag":"sql","totalCount":5,"slug":"/sql","path":"/tag/sql"},{"tag":"sta","totalCount":5,"slug":"/sta","path":"/tag/sta"},{"tag":"startup","totalCount":1,"slug":"/startup","path":"/tag/startup"},{"tag":"step functions","totalCount":1,"slug":"/step-functions","path":"/tag/step-functions"},{"tag":"stock","totalCount":1,"slug":"/stock","path":"/tag/stock"},{"tag":"structures","totalCount":1,"slug":"/structures","path":"/tag/structures"},{"tag":"style","totalCount":1,"slug":"/style","path":"/tag/style"},{"tag":"swe","totalCount":1,"slug":"/swe","path":"/tag/swe"},{"tag":"table","totalCount":1,"slug":"/table","path":"/tag/table"},{"tag":"team","totalCount":2,"slug":"/team","path":"/tag/team"},{"tag":"team-building","totalCount":1,"slug":"/team-building","path":"/tag/team-building"},{"tag":"terraform","totalCount":1,"slug":"/terraform","path":"/tag/terraform"},{"tag":"test","totalCount":2,"slug":"/test","path":"/tag/test"},{"tag":"theories","totalCount":1,"slug":"/theories","path":"/tag/theories"},{"tag":"thinking","totalCount":2,"slug":"/thinking","path":"/tag/thinking"},{"tag":"time","totalCount":3,"slug":"/time","path":"/tag/time"},{"tag":"tips","totalCount":2,"slug":"/tips","path":"/tag/tips"},{"tag":"tools","totalCount":4,"slug":"/tools","path":"/tag/tools"},{"tag":"tree","totalCount":3,"slug":"/tree","path":"/tag/tree"},{"tag":"typescript","totalCount":1,"slug":"/typescript","path":"/tag/typescript"},{"tag":"ubuntu","totalCount":1,"slug":"/ubuntu","path":"/tag/ubuntu"},{"tag":"ui","totalCount":2,"slug":"/ui","path":"/tag/ui"},{"tag":"unix","totalCount":1,"slug":"/unix","path":"/tag/unix"},{"tag":"vaccine","totalCount":1,"slug":"/vaccine","path":"/tag/vaccine"},{"tag":"video","totalCount":1,"slug":"/video","path":"/tag/video"},{"tag":"vscode","totalCount":1,"slug":"/vscode","path":"/tag/vscode"},{"tag":"web","totalCount":13,"slug":"/web","path":"/tag/web"},{"tag":"wine","totalCount":1,"slug":"/wine","path":"/tag/wine"},{"tag":"wkt","totalCount":1,"slug":"/wkt","path":"/tag/wkt"},{"tag":"writing","totalCount":15,"slug":"/writing","path":"/tag/writing"},{"tag":"xml","totalCount":1,"slug":"/xml","path":"/tag/xml"},{"tag":"yarn","totalCount":1,"slug":"/yarn","path":"/tag/yarn"},{"tag":"yolo","totalCount":2,"slug":"/yolo","path":"/tag/yolo"},{"tag":"zsh","totalCount":1,"slug":"/zsh","path":"/tag/zsh"}]}},
    "staticQueryHashes": ["1308211557","2744905544","467212769"]}